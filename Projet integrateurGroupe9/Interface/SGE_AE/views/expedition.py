from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QTableWidget, QTableWidgetItem, QComboBox,
    QDateEdit, QMessageBox
)
from PyQt5.QtCore import QDate, Qt
from controllers.expedition_controller import (
    handle_create_expedition, handle_pending_expeditions,
    handle_preparation_expedition, handle_colis_by_bon,
    handle_valider_expedition
)
from views.expedition_detail import ExpeditionDetailWindow


def format_date(dt):
    return dt.strftime("%d/%m/%Y") if dt else "‚Äî"

class ExpeditionModule(QWidget):
    def __init__(self, db_conn, user):
        super().__init__()
        self.conn = db_conn
        self.user = user
        self.selected_bon_id = None
        
        # Appliquer la feuille de style globale
        self.setStyleSheet("""
            QWidget {
                background-color: #1e4b4b;  /* Fond vert fonc√© */
                color: #ffffff;
                font-family: "Segoe UI", Arial, sans-serif;
                font-size: 13px;
            }

            QLabel {
                color: #ffffff;
                font-weight: bold;
            }

            QPushButton {
                background-color: #ffffff;
                color: #1e4b4b;
                border: none;
                border-radius: 12px;
                padding: 8px 14px;
                font-weight: bold;
            }

            QPushButton:hover {
                background-color: #dddddd;
            }

            QLineEdit, QComboBox, QDateEdit {
                background-color: #ffffff;
                color: #000000;
                padding: 4px 8px;
                border-radius: 6px;
            }

            QTableWidget {
                background-color: #f0f0f0;
                color: #000000;
                border-radius: 8px;
                gridline-color: #cccccc;
            }

            QHeaderView::section {
                background-color: #2f5f5f;
                color: #ffffff;
                font-weight: bold;
                padding: 4px;
                border: none;
            }
        """)
        
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        title = QLabel("üì¶ Gestion des Exp√©ditions")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 16px; font-weight: bold;")
        layout.addWidget(title)

        # Section cr√©ation
        creation_layout = QHBoxLayout()
        self.ref_input = QLineEdit()
        self.date_input = QDateEdit(QDate.currentDate())
        self.priority_input = QComboBox()
        self.priority_input.addItems(["normal", "√©lev√©e üî∫", "urgente üö®"])
        create_btn = QPushButton("‚ûï Cr√©er bon")
        create_btn.clicked.connect(self.create_expedition)

        creation_layout.addWidget(QLabel("üÜî R√©f√©rence:"))
        creation_layout.addWidget(self.ref_input)
        creation_layout.addWidget(QLabel("üìÖ Date pr√©vue:"))
        creation_layout.addWidget(self.date_input)
        creation_layout.addWidget(QLabel("‚ö° Priorit√©:"))
        creation_layout.addWidget(self.priority_input)
        creation_layout.addWidget(create_btn)
        layout.addLayout(creation_layout)

        # Table des bons
        self.bons_table = QTableWidget()
        self.bons_table.setColumnCount(6)
        self.bons_table.setHorizontalHeaderLabels([
            "ID", "R√©f√©rence", "Date cr√©ation", "Date pr√©vue", "Priorit√©", "Statut"
        ])
        self.bons_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.bons_table.cellClicked.connect(self.on_bon_selected)
        layout.addWidget(QLabel("‚åõ Bons d'exp√©dition en attente :"))
        layout.addWidget(self.bons_table)

        # Section pr√©paration colis
        prep_layout = QHBoxLayout()
        self.prod_id_input = QLineEdit()
        self.qte_input = QLineEdit()
        prepare_btn = QPushButton("üì¶ Pr√©parer colis")
        prepare_btn.clicked.connect(self.prepare_colis)

        prep_layout.addWidget(QLabel("üî¢ ID Produit:"))
        prep_layout.addWidget(self.prod_id_input)
        prep_layout.addWidget(QLabel("‚ûï Quantit√©:"))
        prep_layout.addWidget(self.qte_input)
        prep_layout.addWidget(prepare_btn)
        layout.addLayout(prep_layout)

        # R√©sum√© des colis
        self.colis_table = QTableWidget()
        self.colis_table.setColumnCount(4)
        self.colis_table.setHorizontalHeaderLabels([
            "ID Colis", "R√©f√©rence", "Date", "Quantit√© totale"
        ])
        layout.addWidget(QLabel("üìã Colis associ√©s :"))
        layout.addWidget(self.colis_table)

        # Validation finale
        valider_btn = QPushButton("‚úÖ Valider exp√©dition")
        valider_btn.clicked.connect(self.valider_expedition)
        layout.addWidget(valider_btn)

        detail_btn = QPushButton("üîç Ouvrir d√©tails")
        detail_btn.clicked.connect(self.ouvrir_details)
        layout.addWidget(detail_btn)

        self.setLayout(layout)
        self.load_bons()

    def create_expedition(self):
        ref = self.ref_input.text().strip()
        if not ref:
            QMessageBox.warning(self, "‚ö†Ô∏è Champ requis", "R√©f√©rence obligatoire")
            return
        try:
            date_prevue = self.date_input.date().toPyDate()
            priorite = self.priority_input.currentText()
            bon_id = handle_create_expedition(
                self.conn, ref, date_prevue, priorite, self.user["idIndividu"]
            )
            QMessageBox.information(self, "üéâ Succ√®s", f"Bon #{bon_id} cr√©√©")
            self.ref_input.clear()
            self.load_bons()
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", str(e))

    def load_bons(self):
        try:
            bons = handle_pending_expeditions(self.conn)
            self.bons_table.setRowCount(len(bons))
            for row, b in enumerate(bons):
                self.bons_table.setItem(row, 0, QTableWidgetItem(str(b["idBon"])))
                self.bons_table.setItem(row, 1, QTableWidgetItem(b["reference"]))
                self.bons_table.setItem(row, 2, QTableWidgetItem(format_date(b["dateCreation"])))
                self.bons_table.setItem(row, 3, QTableWidgetItem(format_date(b["dateExpeditionPrevue"])))
                self.bons_table.setItem(row, 4, QTableWidgetItem(b["priorite"]))
                self.bons_table.setItem(row, 5, QTableWidgetItem(b["statut"]))
            self.bons_table.resizeColumnsToContents()
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", str(e))

    def on_bon_selected(self, row, _):
        self.selected_bon_id = int(self.bons_table.item(row, 0).text())
        self.load_colis()

    def load_colis(self):
        if not self.selected_bon_id:
            return
        try:
            colis = handle_colis_by_bon(self.conn, self.selected_bon_id)
            self.colis_table.setRowCount(len(colis))
            for row, c in enumerate(colis):
                self.colis_table.setItem(row, 0, QTableWidgetItem(str(c["idColis"])))
                self.colis_table.setItem(row, 1, QTableWidgetItem(c["reference"]))
                self.colis_table.setItem(row, 2, QTableWidgetItem(format_date(c["dateCreation"])))
                self.colis_table.setItem(row, 3, QTableWidgetItem(str(c["quantite_totale"])))
            self.colis_table.resizeColumnsToContents()
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", f"Chargement colis √©chou√©: {str(e)}")

    def prepare_colis(self):
        if not self.selected_bon_id:
            QMessageBox.warning(self, "‚ö†Ô∏è S√©lection requise", "S√©lectionnez un bon.")
            return
        try:
            produit_id = int(self.prod_id_input.text())
            quantite = int(self.qte_input.text())
            if quantite <= 0:
                raise ValueError("Quantit√© invalide.")
            colis_id = handle_preparation_expedition(
                self.conn, self.selected_bon_id, produit_id, quantite
            )
            QMessageBox.information(self, "üì¶ Colis pr√™t", f"Colis #{colis_id} pr√©par√©.")
            self.prod_id_input.clear()
            self.qte_input.clear()
            self.load_colis()
        except ValueError:
            QMessageBox.warning(self, "‚ö†Ô∏è Erreur de saisie", "Veuillez entrer des nombres valides.")
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", f"Pr√©paration √©chou√©e : {str(e)}")

    def ouvrir_details(self):
        if not self.selected_bon_id:
            QMessageBox.warning(self, "‚ö†Ô∏è S√©lection requise", "S√©lectionnez un bon.")
            return
        try:
            self.detail_window = ExpeditionDetailWindow(self.conn, self.user, self.selected_bon_id)
            self.detail_window.show()
            self.detail_window.raise_()
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", f"Impossible d'ouvrir la fen√™tre de d√©tails : {str(e)}")

    def valider_expedition(self):
        try:
            row = self.bons_table.currentRow()
            if row < 0:
                QMessageBox.warning(self, "‚ö†Ô∏è S√©lection", "Veuillez s√©lectionner un bon d‚Äôexp√©dition √† valider.")
                return

            bon_id = int(self.bons_table.item(row, 0).text())

            handle_valider_expedition(self.conn, bon_id)

            QMessageBox.information(self, "‚úÖ Succ√®s", f"Bon d‚Äôexp√©dition #{bon_id} valid√© avec succ√®s.")
            self.load_bons()
        except Exception as e:
            QMessageBox.critical(self, "‚ùå Erreur", f"Erreur lors de la validation : {e}")
