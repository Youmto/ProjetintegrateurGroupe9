from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QStatusBar, QListWidget, QListWidgetItem, QStackedWidget,
    QLabel, QSizePolicy, QSpacerItem
)
from PyQt5.QtCore import Qt, QTimer, QSize
from PyQt5.QtGui import QIcon, QFont
from datetime import datetime
import inspect
from typing import Type, Dict, Tuple
import logging

# ‚û§ Configuration des logs
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# ‚û§ Imports mod√®les et vues
# Assurez-vous que ces chemins sont corrects par rapport √† l'emplacement de main_window.py
from models.user_model import get_user_roles
from views.reception import ReceptionModule
from views.expedition import ExpeditionModule
from views.inventaire import InventaireModule
from views.rapports import RapportsModule
from views.supervision import SupervisionModule
from views.admin import AdminModule
from views.mouvements import MouvementsModule
from views.produits import ProduitsModule
from views.cellules import CellulesModule
from views.deplacement import DeplacementModule
from views.livreur_confirmation import LivreurConfirmationWindow
from views.lot_detail import LotDetailWindow
from views.approvisionnement import ApprovisionnementWindow
from views.dashboard import DashboardModule


class MainWindow(QMainWindow):
    # Ce mappage est utile pour sp√©cifier explicitement quels arguments
    # chaque module attend. 'conn' et 'user' sont g√©r√©s.
    MODULE_ARG_MAP: Dict[Type[QWidget], Tuple[str, ...]] = {
        MouvementsModule: ('conn','user'),
        SupervisionModule: ('conn', 'user'),
        ReceptionModule: ('conn', 'user'),
        ExpeditionModule: ('conn', 'user'),
        InventaireModule: ('conn', 'user'),
        RapportsModule: ('conn', 'user'),
        AdminModule: ('conn', 'user'),
        DeplacementModule: ('conn', 'user'),
        ProduitsModule: ('conn','user'),
        CellulesModule:('conn','user'),
        LivreurConfirmationWindow: ('conn', 'user'),
        LotDetailWindow: ('conn', 'user'),
        ApprovisionnementWindow: ('conn', 'user'),
        DashboardModule: ('conn', 'user'),
    }

    # ‚û§ Mappage des modules aux cat√©gories et ic√¥nes
    # Ceci d√©finit la structure de votre menu lat√©ral et quels modules appartiennent √† quelle cat√©gorie.
    MODULE_CATEGORIES = {
        "G√©n√©ral": {
            "Dashboard": DashboardModule,
            "Inventaire": InventaireModule,
        },
        "Gestion du Stock": {
            "R√©ception": ReceptionModule,
            "Exp√©dition": ExpeditionModule,
            "Mouvements": MouvementsModule,
            "D√©placement": DeplacementModule,
            "Produits": ProduitsModule,
            "Cellules": CellulesModule,
            "Approvisionnement": ApprovisionnementWindow,
            "Lot D√©tail": LotDetailWindow,
        },
        "Op√©rations Sp√©ciales": {
            "Livreur": LivreurConfirmationWindow,
        },
        "Reporting & Admin": {
            "Rapports": RapportsModule,
            "Supervision": SupervisionModule,
            "Administration": AdminModule,
        },
    }

    # ‚û§ D√©finir les ic√¥nes pour chaque module et cat√©gorie
    # J'utilise des emojis pour la simplicit√©, mais pour un rendu professionnel,
    # remplacez-les par des chemins vers des fichiers .png ou .svg (ex: "icons/dashboard.png").
    ICONS = {
        "Dashboard": "üè†",
        "Inventaire": "üì¶",
        "R√©ception": "üì•",
        "Exp√©dition": "üì§",
        "Mouvements": "üîÑ",
        "D√©placement": "üöö",
        "Produits": "üè∑Ô∏è",
        "Cellules": "üìç",
        "Approvisionnement": "‚ûï",
        "Lot D√©tail": "üîé",
        "Livreur": "üßë‚Äçüöö",
        "Rapports": "üìà",
        "Supervision": "üëÄ",
        "Administration": "‚öôÔ∏è",
        # Ic√¥nes pour les cat√©gories (ces ic√¥nes peuvent √™tre affich√©es √† c√¥t√© du titre de la cat√©gorie)
        "G√©n√©ral": "üåê",
        "Gestion du Stock": "üì¶",
        "Op√©rations Sp√©ciales": "‚ú®",
        "Reporting & Admin": "üìä",
    }


    def __init__(self, parent=None, db_conn=None, user=None):
        super().__init__(parent)
        self.db_conn = db_conn
        self.user = user
        # Dictionnaire pour stocker les instances uniques des modules charg√©s
        # Cl√©: Classe du module (hashable), Valeur: Instance du QWidget
        self.modules_instances: Dict[Type[QWidget], QWidget] = {}

        if not self.db_conn:
            logger.error("‚ùå Connexion DB manquante.")
            raise ValueError("Connexion √† la base de donn√©es requise.")
        if not self.user or 'idIndividu' not in self.user:
            logger.error("‚ùå Utilisateur invalide ou ID manquant.")
            raise ValueError("Utilisateur avec ID requis.")

        logger.info(f"üßë‚Äçüíº Connexion en cours pour {self.user.get('nom', 'Inconnu')}")
        self._init_ui()
        self._init_timer()
        logger.info("‚úÖ Interface principale initialis√©e")

    def _init_ui(self):
        self.setWindowTitle(f"üì¶ SGE - {self.user.get('nom', 'Utilisateur')}")
        self.setMinimumSize(1024, 768)
        self._init_status_bar()
        self._init_layout()
        self._setup_sidebar_styles() # Application des styles CSS
        self._load_modules()

    def _init_status_bar(self):
        self.statusBar().showMessage(self._status_message)
        logger.debug("üì° Barre de statut pr√™te")

    def _init_timer(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self._update_status_bar)
        self.timer.start(1000)
        logger.debug("‚è±Ô∏è Timer de mise √† jour de la barre de statut activ√©")

    @property
    def _status_message(self) -> str:
        return f"üîê Connect√© : {self.user.get('nom', 'Utilisateur')} | üïí {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"

    def _update_status_bar(self):
        self.statusBar().showMessage(self._status_message)

    def _init_layout(self):
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0) # Pas de marges pour un look plein √©cran

        # --- Partie Gauche : Menu lat√©ral (Sidebar) ---
        self.sidebar_widget = QWidget(self)
        self.sidebar_widget.setFixedWidth(250) # Largeur fixe pour la barre lat√©rale
        sidebar_layout = QVBoxLayout(self.sidebar_widget)
        sidebar_layout.setContentsMargins(10, 10, 10, 10)
        sidebar_layout.setSpacing(5) # Espacement entre les √©l√©ments

        # Titre du menu / Logo
        logo_label = QLabel("SGE - Syst√®me de Gestion d'Entrep√¥t")
        logo_label.setAlignment(Qt.AlignCenter)
        logo_label.setFont(QFont("Arial", 12, QFont.Bold))
        logo_label.setStyleSheet("color: white; padding-bottom: 15px;")
        sidebar_layout.addWidget(logo_label)

        # Liste des modules
        self.module_list_widget = QListWidget(self)
        self.module_list_widget.setFocusPolicy(Qt.NoFocus) # Emp√™che la s√©lection au clavier pour un clic uniquement
        self.module_list_widget.setAlternatingRowColors(False)
        self.module_list_widget.setIconSize(QSize(24, 24)) # Taille des ic√¥nes
        self.module_list_widget.itemClicked.connect(self._sidebar_item_clicked) # Connecte le clic

        sidebar_layout.addWidget(self.module_list_widget)

        # Espace flexible en bas de la sidebar
        sidebar_layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        main_layout.addWidget(self.sidebar_widget)

        # --- Partie Droite : Contenu principal (Stacked Widget) ---
        self.stacked_widget = QStackedWidget(self)
        main_layout.addWidget(self.stacked_widget)

        logger.debug("üìê Layout principal avec sidebar et stacked widget configur√©")

    def _setup_sidebar_styles(self):
        """
        Applique des styles CSS √† la barre lat√©rale et √† ses √©l√©ments pour un look pro.
        """
        self.sidebar_widget.setStyleSheet("""
            QWidget {
                background-color: #2c3e50; /* Bleu fonc√© pour la sidebar */
                color: #ecf0f1; /* Texte clair */
                border-right: 1px solid #34495e; /* Bordure discr√®te */
            }
            QListWidget {
                background-color: #2c3e50;
                border: none;
                padding: 5px;
            }
            QListWidget::item {
                padding: 10px 5px;
                margin-bottom: 3px;
                border-radius: 5px;
                color: #ecf0f1; /* Couleur par d√©faut des √©l√©ments */
            }
            QListWidget::item:selected {
                background-color: #3498db; /* Bleu vif √† la s√©lection */
                color: white;
            }
            QListWidget::item:hover:!selected {
                background-color: #34495e; /* Gris fonc√© au survol */
            }
            /* Style pour les en-t√™tes de cat√©gorie (non-cliquables) */
            QListWidget::item[data-role="category"] { /* Utilise le data-role pour cibler */
                font-weight: bold;
                color: #bdc3c7; /* Couleur l√©g√®rement plus claire pour les cat√©gories */
                background-color: transparent;
                padding: 15px 5px 5px 5px; /* Plus d'espace au-dessus */
                border-bottom: 1px solid #34495e; /* S√©parateur */
                margin-top: 10px;
            }
            QListWidget::item[data-role="category"]:selected,
            QListWidget::item[data-role="category"]:hover {
                background-color: transparent; /* Emp√™che la s√©lection/survol de changer l'apparence */
                color: #bdc3c7;
            }
        """)

    def _load_modules(self):
        """
        Charge les modules dynamiquement en fonction des r√¥les de l'utilisateur
        et les ajoute √† la barre lat√©rale et au stacked widget.
        """
        try:
            logger.info("üöÄ Chargement des modules pour la sidebar...")

            raw_roles = get_user_roles(self.db_conn, self.user['idIndividu'])
            logger.debug(f"üîç R√¥les r√©cup√©r√©s : {raw_roles}")

            roles = [
                r[0].strip().lower() if isinstance(r, tuple) else str(r).strip().lower()
                for r in raw_roles
            ]
            logger.info(f"üîë R√¥les normalis√©s : {roles}")

            # Nettoyer les widgets existants avant de recharger (utile si la fonction est appel√©e plusieurs fois)
            self.module_list_widget.clear()
            # Supprimer les widgets du QStackedWidget pour √©viter les fuites m√©moire
            for i in reversed(range(self.stacked_widget.count())):
                widget = self.stacked_widget.widget(i)
                self.stacked_widget.removeWidget(widget)
                widget.deleteLater() # Supprime l'instance du widget de la m√©moire
            self.modules_instances.clear() # R√©initialise le cache des instances de modules


            # Parcourir les cat√©gories d√©finies pour construire le menu
            for category_name, modules_in_category in self.MODULE_CATEGORIES.items():
                # Ajouter l'en-t√™te de cat√©gorie √† la QListWidget
                category_item = QListWidgetItem(f"{self.ICONS.get(category_name, '')} {category_name.upper()}")
                # Rendre l'√©l√©ment de cat√©gorie non s√©lectionnable
                category_item.setFlags(category_item.flags() & ~Qt.ItemIsSelectable)
                category_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
                # Utiliser setData avec un r√¥le de donn√©es pour le ciblage CSS et l'identification
                category_item.setData(Qt.UserRole, "category")
                category_item.setData(Qt.AccessibleDescriptionRole, "category") # Pour le CSS [data-role="category"]
                self.module_list_widget.addItem(category_item)

                for module_name, module_class in modules_in_category.items():
                    # V√©rifier les permissions bas√©es sur les r√¥les de l'utilisateur
                    should_add = False
                    # Modules communs √† tous les utilisateurs (ex: Dashboard, Inventaire)
                    if module_name in ["Dashboard", "Inventaire"]:
                        should_add = True
                    # Modules sp√©cifiques aux magasiniers
                    elif any("magasinier" in r for r in roles) and module_class in [
                        ReceptionModule, ExpeditionModule, DeplacementModule,
                        ProduitsModule, MouvementsModule, CellulesModule,
                        LotDetailWindow, ApprovisionnementWindow
                    ]:
                        should_add = True
                    # Modules sp√©cifiques aux livreurs
                    elif any("livreur" in r for r in roles) and module_class == LivreurConfirmationWindow:
                        should_add = True
                    # Modules sp√©cifiques aux responsables
                    elif any("responsable" in r for r in roles) and module_class in [
                        RapportsModule, SupervisionModule, AdminModule, DeplacementModule
                    ]:
                        should_add = True

                    if should_add:
                        # Si l'utilisateur a la permission, ajouter le module au menu
                        self._add_module_to_sidebar(module_name, module_class)

            # S√©lectionner le premier module cliquable par d√©faut apr√®s le chargement
            if self.module_list_widget.count() > 0:
                first_selectable_item = None
                for i in range(self.module_list_widget.count()):
                    item = self.module_list_widget.item(i)
                    if item.flags() & Qt.ItemIsSelectable: # V√©rifie si l'√©l√©ment est s√©lectionnable
                        first_selectable_item = item
                        break
                if first_selectable_item:
                    self.module_list_widget.setCurrentItem(first_selectable_item)
                    self._sidebar_item_clicked(first_selectable_item) # D√©clenche l'affichage du premier module

            logger.info(f"‚úÖ {self.stacked_widget.count()} modules charg√©s dans le stacked widget.")

        except Exception as e:
            logger.error(f"üí• Erreur lors du chargement des modules : {e}", exc_info=True)
            raise

    def _add_module_to_sidebar(self, name: str, module_class: Type[QWidget]):
        """
        Ajoute un module √† la barre lat√©rale (QListWidget) et g√®re son instance
        dans le QStackedWidget.
        """
        try:
            logger.debug(f"üß© Tentative de chargement du module : {name}")

            # Cr√©er l'instance du module si elle n'existe pas d√©j√†
            if module_class not in self.modules_instances:
                args = self._resolve_args(module_class)
                instance = module_class(*args)
                self.modules_instances[module_class] = instance # Stocke l'instance avec la classe comme cl√©
                self.stacked_widget.addWidget(instance) # Ajoute l'instance au QStackedWidget
                logger.info(f"‚úÖ Instance du module '{name}' cr√©√©e et ajout√©e au stacked widget.")
            else:
                instance = self.modules_instances[module_class]
                logger.info(f"üîÑ Module '{name}' d√©j√† instanci√©, r√©utilisation.")

            # Ajouter l'√©l√©ment au QListWidget de la sidebar
            # Utilisez la m√©thode appropri√©e pour charger une ic√¥ne r√©elle si n√©cessaire
            icon_text = self.ICONS.get(name, "")
            list_item = QListWidgetItem(f"{icon_text} {name}")

            # Stocke la classe du module (qui est hashable) dans le UserRole de l'item QListWidgetItem.
            # C'est la cl√© de la solution pour l'erreur 'unhashable type'.
            list_item.setData(Qt.UserRole, module_class)
            self.module_list_widget.addItem(list_item)

            logger.info(f"‚úÖ √âl√©ment '{name}' ajout√© √† la barre lat√©rale avec sa classe.")
        except Exception as e:
            logger.error(f"‚ùå Impossible de charger '{name}' : {e}", exc_info=True)

    def _resolve_args(self, module_class: Type[QWidget]) -> list:
        """
        R√©sout les arguments n√©cessaires pour l'initialisation d'un module
        en se basant sur self.MODULE_ARG_MAP ou en inspectant le constructeur.
        """
        try:
            arg_names = self.MODULE_ARG_MAP.get(module_class)

            if not arg_names:
                # Si non sp√©cifi√© dans MODULE_ARG_MAP, inspecter le constructeur __init__
                # Cela permet une grande flexibilit√© si MODULE_ARG_MAP n'est pas exhaustif.
                sig = inspect.signature(module_class.__init__)
                # Filtrer 'self' et les arguments avec des valeurs par d√©faut si vous ne voulez pas les fournir
                arg_names = [p.name for p in sig.parameters.values() if p.name != 'self']
                logger.debug(f"‚ÑπÔ∏è Arguments du constructeur pour {module_class.__name__} (auto-d√©tect√©s): {arg_names}")

            resolved = []
            for arg in arg_names:
                if arg == 'conn':
                    resolved.append(self.db_conn)
                elif arg == 'user':
                    resolved.append(self.user)
                else:
                    # Si un module a des arguments suppl√©mentaires, il faudrait les g√©rer ici
                    # ou les sp√©cifier dans MODULE_ARG_MAP.
                    logger.warning(f"‚ùì Argument inconnu '{arg}' pour le module {module_class.__name__}. Non fourni.")
                    # Vous pourriez vouloir lever une erreur ici ou fournir None/une valeur par d√©faut
                    # en fonction de la n√©cessit√© de l'argument.
                    resolved.append(None) # Ou g√©rer une valeur par d√©faut/erreur

            return resolved

        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erreur de r√©solution des arguments pour {module_class.__name__}: {e}", exc_info=True)
            raise

    def _sidebar_item_clicked(self, item: QListWidgetItem):
        """
        G√®re le clic sur un √©l√©ment de la barre lat√©rale.
        Change le widget affich√© dans le QStackedWidget.
        """
        # R√©cup√©rer les donn√©es stock√©es dans l'item via UserRole
        item_data = item.data(Qt.UserRole)

        # V√©rifier si c'est un √©l√©ment de cat√©gorie (que nous avons rendu non s√©lectionnable mais qui pourrait √™tre cliqu√©)
        if item_data == "category":
            logger.debug(f"Cat√©gorie cliqu√©e : '{item.text()}', ignor√© la s√©lection de module.")
            # Vous pouvez d√©s√©lectionner l'√©l√©ment pour √©viter qu'il ne reste "activ√©" visuellement.
            self.module_list_widget.setCurrentItem(None) # D√©s√©lectionne l'√©l√©ment
            return

        # Si ce n'est pas une cat√©gorie, item_data doit √™tre la classe du module
        if isinstance(item_data, type) and issubclass(item_data, QWidget):
            module_class = item_data
            module_widget = self.modules_instances.get(module_class) # R√©cup√®re l'instance du module

            if module_widget:
                self.stacked_widget.setCurrentWidget(module_widget) # Affiche le module
                # Met √† jour le titre de la fen√™tre avec le nom du module actuel
                clean_module_name = item.text().strip()
                # Enl√®ve l'emoji du nom si pr√©sent pour le titre
                if len(clean_module_name) > 0 and clean_module_name[0] in self.ICONS.values():
                    clean_module_name = clean_module_name[1:].strip()
                self.setWindowTitle(f"üì¶ SGE - {clean_module_name} - {self.user.get('nom', 'Utilisateur')}")
                logger.info(f"‚û°Ô∏è Affichage du module : '{clean_module_name}'")
            else:
                logger.warning(f"‚ö†Ô∏è Aucun widget instanci√© trouv√© pour la classe de module : {module_class.__name__}. Clic ignor√©.")
        else:
            logger.warning(f"‚ö†Ô∏è Donn√©e UserRole invalide ou non-classe de module pour l'√©l√©ment '{item.text()}'. Clic ignor√©.")